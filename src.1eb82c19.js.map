{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","intervalId","isActive","onTick","updateTimeFields","daysValueField","document","querySelector","hoursValueField","minsValueField","secsValueField","init","zeroTime","getTimeComponents","getTime","Date","now","time","days","parDays","Math","floor","hours","par","mins","secs","value","String","padStart","newDateValue","slice","setInterval","currentTime","deltaTime","textContent","timer","startTimer","call"],"mappings":";;;AAyEA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAzEA,QAAA,gBAEMA,IAAAA,EAAAA,WACmC,SAAA,EAAA,GAAvBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAa,EAAA,KAAA,GAC5BC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbG,KAAAA,OAAS,KAAKC,iBACdC,KAAAA,eAAiBC,SAASC,cAAiB,GAAA,OAAA,KAAKR,SAArD,uBACKS,KAAAA,gBAAkBF,SAASC,cAAiB,GAAA,OAAA,KAAKR,SAAtD,wBACKU,KAAAA,eAAiBH,SAASC,cAAiB,GAAA,OAAA,KAAKR,SAArD,uBACKW,KAAAA,eAAiBJ,SAASC,cAAiB,GAAA,OAAA,KAAKR,SAArD,uBAEKY,KAAAA,OA2Db,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAzDO,MAAA,WACOC,IAAAA,EAAW,KAAKC,kBAAkB,KAAKb,WAAWc,UAAYC,KAAKC,OACpEb,KAAAA,OAAOS,KAuDpB,CAAA,IAAA,oBAnDC,MAAA,SAAkBK,GAMJ,MAAA,CAAEC,KALI,KAAKC,QAAQC,KAAKC,MAAMJ,EAAQ,QAK9BK,MAJD,KAAKC,IAAIH,KAAKC,MAAOJ,EAAQ,MAAyB,OAI9CO,KAHT,KAAKD,IAAIH,KAAKC,MAAOJ,EAAQ,KAAoB,MAGlCQ,KAFf,KAAKF,IAAIH,KAAKC,MAAOJ,EAAQ,IAAc,SA+ChE,CAAA,IAAA,MAzCI,MAAA,SAAIS,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OAwCzC,CAAA,IAAA,UApCI,MAAA,SAAQF,GACEG,IAAAA,EAAeF,OAAOD,GAAOE,SAAS,EAAG,KAC3CC,MAAoB,MAApBA,EAAa,GACNA,EAAaC,MAAM,GAEvBD,IA+Bf,CAAA,IAAA,aA3BI,MAAA,WAAa,IAAA,EAAA,KACL,KAAK3B,WAIJA,KAAAA,UAAW,EACXD,KAAAA,WAAa8B,YAAY,WACpBC,IAAAA,EAAcjB,KAAKC,MACnBiB,EAAY,EAAKjC,WAAWc,UAAYkB,EACxCf,EAAO,EAAKJ,kBAAkBoB,GACpC,EAAK9B,OAAOc,IACb,QAgBX,CAAA,IAAA,mBAXI,MAAA,SAA8C,GAA3BC,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOE,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC7BpB,KAAAA,eAAe6B,YAAchB,EAC7BV,KAAAA,gBAAgB0B,YAAcZ,EAC9Bb,KAAAA,eAAeyB,YAAcV,EAC7Bd,KAAAA,eAAewB,YAAcT,MAO1C,EAvEM3B,GAsEAqC,EAAQ,IAAIrC,EAAe,CAACC,SAAU,WAAYC,WAAY,IAAIe,KAAK,kBAC7EoB,EAAMC,WAAWC,KAAKF","file":"src.1eb82c19.js","sourceRoot":"../src","sourcesContent":["import './styles.css';\r\n\r\nclass CountdownTimer {\r\n    constructor({ selector, targetDate}) {\r\n        this.intervalId = null;\r\n        this.isActive = false;\r\n        this.selector = selector;\r\n        this.targetDate = targetDate;\r\n        this.onTick = this.updateTimeFields;\r\n        this.daysValueField = document.querySelector(`${this.selector} [data-value=days]`);\r\n        this.hoursValueField = document.querySelector(`${this.selector} [data-value=hours]`);\r\n        this.minsValueField = document.querySelector(`${this.selector} [data-value=mins]`);\r\n        this.secsValueField = document.querySelector(`${this.selector} [data-value=secs]`);\r\n\r\n        this.init();\r\n    };\r\n       init() {\r\n        const zeroTime = this.getTimeComponents(this.targetDate.getTime() - Date.now());\r\n        this.onTick(zeroTime);\r\n    };\r\n\r\n\r\n getTimeComponents(time) {\r\n        const days = this.parDays(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n        const hours = this.par(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n        const mins = this.par(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n        const secs = this.par(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n        return { days, hours, mins, secs };\r\n    }\r\n\r\n    // добавляет ноль к количеству оставшихся минут, часов и секунд, если их меньше, чем 10\r\n    par(value) {\r\n        return String(value).padStart(2, '0');\r\n    }\r\n\r\n    // добавляет ноль к количеству оставшихся дней, если их меньше чем 10\r\n    parDays(value) {\r\n        const newDateValue = String(value).padStart(3, \"0\");\r\n        if (newDateValue[0] === '0') {\r\n            return newDateValue.slice(1)\r\n        }\r\n        return newDateValue;\r\n    }\r\n\r\n    // запуск отсчёта времени к дате с this.targetDate\r\n    startTimer() {\r\n        if (this.isActive) {\r\n            return;\r\n        }\r\n\r\n        this.isActive = true;  \r\n        this.intervalId = setInterval(() => {\r\n            const currentTime = Date.now();\r\n            const deltaTime = this.targetDate.getTime() - currentTime;\r\n            const time = this.getTimeComponents(deltaTime);\r\n            this.onTick(time);\r\n        }, 1000);\r\n\r\n    }\r\n\r\n    // функция, которая будет передаваться в setInterval и обновлять данные в html\r\n    updateTimeFields({ days, hours, mins, secs }) {\r\n        this.daysValueField.textContent = days;\r\n        this.hoursValueField.textContent = hours;\r\n        this.minsValueField.textContent = mins;\r\n        this.secsValueField.textContent = secs;\r\n    }\r\n}\r\n\r\n\r\n// создаю экземпляр класса, указываю его id в разметке, нужную дату и функцию для выбора нужных элементов в разметке\r\nconst timer = new CountdownTimer({selector: '#timer-1', targetDate: new Date('May 28, 2021')});\r\ntimer.startTimer.call(timer);"]}